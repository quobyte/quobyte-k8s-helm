{{ if .Values.quobyte.podSecurityPolicies }}
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: quobyte-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
spec:
  privileged: true
  allowPrivilegeEscalation: true
  allowedCapabilities:
  - '*'
  volumes:
  - '*'
  hostNetwork: true
  hostPorts:
  - min: 0
    max: 65535
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
---
{{ if semverCompare ">=1.19.0" .Values.k8sVersion }}
apiVersion: storage.k8s.io/v1
{{ else }}
apiVersion: storage.k8s.io/v1beta1  
{{ end }}
kind: CSIDriver
metadata:
  name: {{ .Values.quobyte.csiProvisionerName }}
spec:
  attachRequired: false
  podInfoOnMount: false
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: quobyte-csi-controller-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: quobyte-csi-controller-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  serviceName: quobyte-csi-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  replicas: 1
  template:
    metadata:
      labels:
        app: quobyte-csi-controller-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
        role: quobyte-csi-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
    spec:
      priorityClassName: system-cluster-critical
      serviceAccount: quobyte-csi-controller-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
      containers:
        - name: csi-provisioner
          image: {{ .Values.quobyte.dev.k8sProvisionerImage }}
          args:
            - "--provisioner={{ .Values.quobyte.csiProvisionerName }}"
            - "--csi-address=$(ADDRESS)"
            - "--v=3"
            - "--extra-create-metadata=true"
            - "--timeout=5m"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-cluster-driver-registrar
          image: {{ .Values.quobyte.dev.k8sClusterDriverRegistrarImage }}
          args:
            - "--v=3"
            - "--csi-address=$(ADDRESS)"
            - "--driver-requires-attachment=false"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-resizer
          image: {{ .Values.quobyte.dev.k8sResizerImage }}
          args:
            - "--v=3"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-attacher
          image: {{ .Values.quobyte.dev.k8sAttacherImage }}
          args:
            - "--v=3"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
      {{ if .Values.quobyte.enableSnapshots }} 
        - name: csi-snapshotter
          image: {{ .Values.quobyte.dev.k8sSnapshotterImage }}
          args:
            - "--v=3"
            - "--csi-address=$(ADDRESS)"
            - "--leader-election=false"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: Always
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
      {{ end }}
        - name: quobyte-csi-plugin
          image: {{ .Values.quobyte.dev.csiImage }}
          args :
            - "--csi_socket=$(CSI_ENDPOINT)"
            - "--quobyte_mount_path=$(QUOBYTE_MOUNT_PATH)"
            - "--node_name=$(KUBE_NODE_NAME)"
            - "--api_url=$(QUOBYTE_API_URL)" 
            - "--driver_name={{ .Values.quobyte.csiProvisionerName }}"
            - "--driver_version={{ .Values.quobyte.dev.csiProvisionerVersion }}"
            - "--enable_access_keys={{ .Values.quobyte.enableAccessKeys }}"
            - "--use_k8s_namespace_as_tenant={{ .Values.quobyte.useK8SNamespaceAsTenant }}" 
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: QUOBYTE_MOUNT_PATH
              value:  {{ .Values.quobyte.clientMountPoint }}/mounts
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: QUOBYTE_API_URL
              value: {{ .Values.quobyte.apiURL }} 
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
            {{ if .Values.quobyte.mapHostCertsIntoContainer }}
            - name: certs
              mountPath: /etc/ssl/certs/
            {{ end }}
      volumes:
        - name: socket-dir
          emptyDir: {}
        {{ if .Values.quobyte.mapHostCertsIntoContainer }}
        - name: certs
          hostPath:
            path: /etc/ssl/certs/
            type: Directory
        {{ end }}
---

kind: ServiceAccount
apiVersion: v1
metadata:
  name: quobyte-csi-controller-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  namespace: kube-system

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-provisioner-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["get", "list"]
  - apiGroups: ['policy']
    resources: ['podsecuritypolicies']
    verbs:     ['use']
    resourceNames:
    - quobyte-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-provisioner-binding-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
subjects:
  - kind: ServiceAccount
    name: quobyte-csi-controller-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: quobyte-csi-provisioner-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  apiGroup: rbac.authorization.k8s.io

---
# Attacher must be able to work with PVs, nodes and VolumeAttachments
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-attacher-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["csi.storage.k8s.io"]
    resources: ["csinodeinfos"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ['policy']
    resources: ['podsecuritypolicies']
    verbs:     ['use']
    resourceNames:
    - quobyte-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-attacher-binding-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
subjects:
  - kind: ServiceAccount
    name: quobyte-csi-controller-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: quobyte-csi-attacher-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  apiGroup: rbac.authorization.k8s.io

---

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: external-resizer-runner-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-resizer-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
subjects:
  - kind: ServiceAccount
    name: quobyte-csi-controller-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: external-resizer-runner-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  apiGroup: rbac.authorization.k8s.io

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-cluster-driver-registrar-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
rules:
  - apiGroups: ["csi.storage.k8s.io"]
    resources: ["csidrivers"]
    verbs: ["create", "delete"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "list", "watch", "delete"]
  - apiGroups: ['policy']
    resources: ['podsecuritypolicies']
    verbs:     ['use']
    resourceNames:
    - quobyte-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-cluster-driver-registrar-binding-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
subjects:
  - kind: ServiceAccount
    name: quobyte-csi-controller-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: quobyte-csi-cluster-driver-registrar-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  apiGroup: rbac.authorization.k8s.io

---

kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: quobyte-csi-node-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: quobyte-csi-node-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  template:
    metadata:
      labels:
        app: quobyte-csi-node-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
        role: quobyte-csi-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
    spec:
      priorityClassName: system-node-critical
      serviceAccount: quobyte-csi-node-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
      hostNetwork: true
      containers:
        - name: csi-node-driver-registrar
          image: {{ .Values.quobyte.dev.k8sNodeRegistrarImage }}
          args:
            - "--v=3"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/{{ .Values.quobyte.csiProvisionerName }} /registration/{{ .Values.quobyte.csiProvisionerName }}-reg.sock"]
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/{{ .Values.quobyte.csiProvisionerName }}/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi/
            - name: registration-dir
              mountPath: /registration/
        - name: quobyte-csi-plugin
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          image: {{ .Values.quobyte.dev.csiImage }}
          imagePullPolicy: "Always"
          args :
            - "--csi_socket=$(CSI_ENDPOINT)"
            - "--quobyte_mount_path=$(QUOBYTE_MOUNT_PATH)"
            - "--node_name=$(KUBE_NODE_NAME)"
            - "--api_url=$(QUOBYTE_API_URL)" 
            - "--driver_name={{ .Values.quobyte.csiProvisionerName }}"
            - "--driver_version={{ .Values.quobyte.dev.csiProvisionerVersion }}"
            - "--enable_access_keys={{ .Values.quobyte.enableAccessKeys }}"
            - "--use_k8s_namespace_as_tenant={{ .Values.quobyte.useK8SNamespaceAsTenant }}" 
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            - name: QUOBYTE_MOUNT_PATH
              value:  {{ .Values.quobyte.clientMountPoint }}/mounts
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: QUOBYTE_API_URL
              value: {{ .Values.quobyte.apiURL }} 
          volumeMounts:
            - name: kubelet-dir
              mountPath: /var/lib/kubelet/pods
              mountPropagation: "Bidirectional"
            - name: quobyte-mounts
              mountPath: {{ .Values.quobyte.clientMountPoint }}
              mountPropagation: "Bidirectional"
            - name: plugin-dir
              mountPath: /csi
            {{ if .Values.quobyte.mapHostCertsIntoContainer }}
            - name: certs
              mountPath: /etc/ssl/certs/
            {{ end }}
        {{ if .Values.quobyte.podKiller.enable }}
        - name: quobyte-pod-killer
          securityContext:
            privileged: true
          image: {{ .Values.quobyte.dev.podKillerImage }}
          imagePullPolicy: "Always"
          args :
            - "--node_name=$(KUBE_NODE_NAME)"
            - "--driver_name={{ .Values.quobyte.csiProvisionerName }}"
            - "--monitoring_interval={{ .Values.quobyte.podKiller.monitoringInterval }}"
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: kubelet-dir
              mountPath: /var/lib/kubelet/pods
              mountPropagation: "Bidirectional"
        {{ end }}
      volumes:
        - name: kubelet-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
        - name: quobyte-mounts
          hostPath:
            # Quobyte client also should use the same mount point
            path: {{ .Values.quobyte.clientMountPoint }}
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            # required by kubernetes CSI
            path: /var/lib/kubelet/plugins/{{ .Values.quobyte.csiProvisionerName }}
            type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
        {{ if .Values.quobyte.mapHostCertsIntoContainer }}
        - name: certs
          hostPath:
            path: /etc/ssl/certs/
            type: Directory
        {{ end }}
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: quobyte-csi-node-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-" }}
  namespace: kube-system

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-driver-registrar-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-" }}
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  {{ if .Values.quobyte.podKiller.enable }}
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["list"]
  {{ end }}
  - apiGroups: ['policy']
    resources: ['podsecuritypolicies']
    verbs:     ['use']
    resourceNames:
    - quobyte-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-driver-registrar-binding-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
subjects:
  - kind: ServiceAccount
    name: quobyte-csi-node-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: quobyte-csi-driver-registrar-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  apiGroup: rbac.authorization.k8s.io

{{ if .Values.quobyte.enableSnapshots }}
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  # rename if there are conflicts
  name: external-snapshotter-runner-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  # Secret permission is optional.
  # Enable it if your driver needs secret.
  # For example, `csi.storage.k8s.io/snapshotter-secret-name` is set in VolumeSnapshotClass.
  # See https://kubernetes-csi.github.io/docs/secrets-and-credentials.html for more details.
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents/status"]
    verbs: ["update"]
  - apiGroups: ['policy']
    resources: ['podsecuritypolicies']
    verbs:     ['use']
    resourceNames:
      - quobyte-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-snapshotter-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
subjects:
  - kind: ServiceAccount
    name: quobyte-csi-controller-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: external-snapshotter-runner-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  apiGroup: rbac.authorization.k8s.io

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: kube-system
  name: external-snapshotter-leaderelection-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
rules:
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "watch", "list", "delete", "update", "create"]
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs:     ['use']
  resourceNames:
    - quobyte-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: external-snapshotter-leaderelection-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: quobyte-csi-controller-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
    namespace: kube-system
roleRef:
  kind: Role
  name: external-snapshotter-leaderelection-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  apiGroup: rbac.authorization.k8s.io
{{ end }}

{{ else }} # Without pod security policies
{{ if semverCompare ">=1.19.0" .Values.k8sVersion }}
apiVersion: storage.k8s.io/v1
{{ else }}
apiVersion: storage.k8s.io/v1beta1  
{{ end }}
kind: CSIDriver
metadata:
  name: {{ .Values.quobyte.csiProvisionerName }}
spec:
  attachRequired: false
  podInfoOnMount: false
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: quobyte-csi-controller-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: quobyte-csi-controller-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  serviceName: quobyte-csi-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }} 
  replicas: 1
  template:
    metadata:
      labels:
        app: quobyte-csi-controller-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
        role: quobyte-csi-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
    spec:
      priorityClassName: system-cluster-critical
      serviceAccount: quobyte-csi-controller-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
      containers:
        - name: csi-provisioner
          image: {{ .Values.quobyte.dev.k8sProvisionerImage }}
          args:
            - "--provisioner={{ .Values.quobyte.csiProvisionerName }}"
            - "--csi-address=$(ADDRESS)"
            - "--v=3"
            - "--extra-create-metadata=true"
            - "--timeout=5m"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-cluster-driver-registrar
          image: {{ .Values.quobyte.dev.k8sClusterDriverRegistrarImage }}
          imagePullPolicy: "IfNotPresent"
          args:
            - "--v=3"
            - "--csi-address=$(ADDRESS)"
            - "--driver-requires-attachment=false"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-resizer
          image: {{ .Values.quobyte.dev.k8sResizerImage }}
          args:
            - "--v=3"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-attacher
          image: {{ .Values.quobyte.dev.k8sAttacherImage }}
          args:
            - "--v=3"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
      {{ if .Values.quobyte.enableSnapshots }}        
        - name: csi-snapshotter
          image: {{ .Values.quobyte.dev.k8sSnapshotterImage }}
          imagePullPolicy: Always
          args:
            - "--v=3"
            - "--csi-address=$(ADDRESS)"
            - "--leader-election=false"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
       {{ end }}
        - name: quobyte-csi-plugin
          image: {{ .Values.quobyte.dev.csiImage }}
          args :
            - "--csi_socket=$(CSI_ENDPOINT)"
            - "--quobyte_mount_path=$(QUOBYTE_MOUNT_PATH)"
            - "--node_name=$(KUBE_NODE_NAME)"
            - "--api_url=$(QUOBYTE_API_URL)" 
            - "--driver_name={{ .Values.quobyte.csiProvisionerName }}"
            - "--driver_version={{ .Values.quobyte.dev.csiProvisionerVersion }}"
            - "--enable_access_keys={{ .Values.quobyte.enableAccessKeys }}"
            - "--use_k8s_namespace_as_tenant={{ .Values.quobyte.useK8SNamespaceAsTenant }}" 
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: QUOBYTE_MOUNT_PATH
              value:  {{ .Values.quobyte.clientMountPoint }}/mounts
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: QUOBYTE_API_URL
              value: {{ .Values.quobyte.apiURL }} 
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
            - name: log-dir
              mountPath: /tmp
            {{ if .Values.quobyte.mapHostCertsIntoContainer }}
            - name: certs
              mountPath: /etc/ssl/certs/
            {{ end }}
      volumes:
        - name: socket-dir
          emptyDir: {}
        - name: log-dir
          hostPath:
            path: /tmp
            type: Directory
        {{ if .Values.quobyte.mapHostCertsIntoContainer }}
        - name: certs
          hostPath:
            path: /etc/ssl/certs/
            type: Directory
        {{ end }}
---

kind: ServiceAccount
apiVersion: v1
metadata:
  name: quobyte-csi-controller-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  namespace: kube-system

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-provisioner-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["get", "list"]

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-provisioner-binding-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
subjects:
  - kind: ServiceAccount
    name: quobyte-csi-controller-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: quobyte-csi-provisioner-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  apiGroup: rbac.authorization.k8s.io

---
# Attacher must be able to work with PVs, nodes and VolumeAttachments
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-attacher-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["csi.storage.k8s.io"]
    resources: ["csinodeinfos"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-attacher-binding-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
subjects:
  - kind: ServiceAccount
    name: quobyte-csi-controller-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: quobyte-csi-attacher-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  apiGroup: rbac.authorization.k8s.io

---

{{ if .Values.quobyte.enableSnapshots }}
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: external-snapshotter-runner-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  # Secret permission is optional.
  # Enable it if your driver needs secret.
  # For example, `csi.storage.k8s.io/snapshotter-secret-name` is set in VolumeSnapshotClass.
  # See https://kubernetes-csi.github.io/docs/secrets-and-credentials.html for more details.
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents/status"]
    verbs: ["update"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-snapshotter-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
subjects:
  - kind: ServiceAccount
    name: quobyte-csi-controller-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: external-snapshotter-runner-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  apiGroup: rbac.authorization.k8s.io

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: kube-system
  name: external-snapshotter-leaderelection-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
rules:
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "watch", "list", "delete", "update", "create"]

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: external-snapshotter-leaderelection-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: quobyte-csi-controller-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
    namespace: kube-system
roleRef:
  kind: Role
  name: external-snapshotter-leaderelection-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  apiGroup: rbac.authorization.k8s.io
{{ end }}

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-cluster-driver-registrar-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
rules:
  - apiGroups: ["csi.storage.k8s.io"]
    resources: ["csidrivers"]
    verbs: ["create", "delete"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "list", "watch", "delete"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-cluster-driver-registrar-binding-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
subjects:
  - kind: ServiceAccount
    name: quobyte-csi-controller-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: quobyte-csi-cluster-driver-registrar-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  apiGroup: rbac.authorization.k8s.io

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: external-resizer-runner-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-resizer-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
subjects:
  - kind: ServiceAccount
    name: quobyte-csi-controller-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: external-resizer-runner-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  apiGroup: rbac.authorization.k8s.io

---

kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: quobyte-csi-node-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: quobyte-csi-node-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  template:
    metadata:
      labels:
        app: quobyte-csi-node-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
        role: quobyte-csi
    spec:
      priorityClassName: system-node-critical
      serviceAccount: quobyte-csi-node-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
      hostNetwork: true
      containers:
        - name: csi-node-driver-registrar
          image: {{ .Values.quobyte.dev.k8sNodeRegistrarImage }}
          imagePullPolicy: "IfNotPresent"
          args:
            - "--v=3"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/{{ .Values.quobyte.csiProvisionerName }} /registration/{{ .Values.quobyte.csiProvisionerName }}-reg.sock"]
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/{{ .Values.quobyte.csiProvisionerName }}/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi/
            - name: registration-dir
              mountPath: /registration/
        - name: quobyte-csi-plugin
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          image: {{ .Values.quobyte.dev.csiImage }}
          imagePullPolicy: "Always"
          args :
            - "--csi_socket=$(CSI_ENDPOINT)"
            - "--quobyte_mount_path=$(QUOBYTE_MOUNT_PATH)"
            - "--node_name=$(KUBE_NODE_NAME)"
            - "--api_url=$(QUOBYTE_API_URL)"
            - "--driver_name={{ .Values.quobyte.csiProvisionerName }}"
            - "--driver_version={{ .Values.quobyte.dev.csiProvisionerVersion }}" 
            - "--enable_access_keys={{ .Values.quobyte.enableAccessKeys }}"
            - "--use_k8s_namespace_as_tenant={{ .Values.quobyte.useK8SNamespaceAsTenant }}" 
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            - name: QUOBYTE_MOUNT_PATH
              value:  {{ .Values.quobyte.clientMountPoint }}/mounts
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: QUOBYTE_API_URL
              value: {{ .Values.quobyte.apiURL }}
          volumeMounts:
            - name: kubelet-dir
              mountPath: /var/lib/kubelet/pods
              mountPropagation: "Bidirectional"
            - name: quobyte-mounts
              mountPath: {{ .Values.quobyte.clientMountPoint }}
              mountPropagation: "Bidirectional"
            - name: plugin-dir
              mountPath: /csi
            - name: log-dir
              mountPath: /tmp
            {{ if .Values.quobyte.mapHostCertsIntoContainer }}
            - name: certs
              mountPath: /etc/ssl/certs/
            {{ end }}
       {{ if .Values.quobyte.podKiller.enable }}
        - name: quobyte-pod-killer
          securityContext:
            privileged: true
          image: {{ .Values.quobyte.dev.podKillerImage }}
          imagePullPolicy: "Always"
          args :
            - "--node_name=$(KUBE_NODE_NAME)"
            - "--driver_name={{ .Values.quobyte.csiProvisionerName }}"
            - "--monitoring_interval={{ .Values.quobyte.podKiller.monitoringInterval }}"
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: kubelet-dir
              mountPath: /var/lib/kubelet/pods
              mountPropagation: "Bidirectional"
         {{ end }}
      volumes:
        - name: kubelet-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
        - name: quobyte-mounts
          hostPath:
            # Quobyte client also should use the same mount point
            path: {{ .Values.quobyte.clientMountPoint }}
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            # required by kubernetes CSI
            path: /var/lib/kubelet/plugins/{{ .Values.quobyte.csiProvisionerName }}
            type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
        - name: log-dir
          hostPath:
            path: /tmp
            type: Directory
        {{ if .Values.quobyte.mapHostCertsIntoContainer }}
        - name: certs
          hostPath:
            path: /etc/ssl/certs/
            type: Directory
        {{ end }}
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: quobyte-csi-node-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  namespace: kube-system

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-driver-registrar-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  {{ if .Values.quobyte.podKiller.enable }}
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["list"]
  {{ end }}
---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-driver-registrar-binding-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
subjects:
  - kind: ServiceAccount
    name: quobyte-csi-node-sa-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: quobyte-csi-driver-registrar-role-{{ .Values.quobyte.csiProvisionerName | replace "." "-"  }}
  apiGroup: rbac.authorization.k8s.io
{{ end }}
