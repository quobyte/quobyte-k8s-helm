quobyte:
  # Replace with the name of your tenant that you would like to use
  # for the PVC volumes.
  quobyteTenant: "My Tenant"
  
  # Add the base64 encoded name of the Quobyte user that teh CSI plugin
  # should use to talk to the Quobyte API service. Please make sure
  # that the user exists in Quobyte, or create it in the Quobyte UI.
  quobyteUser: YWRtaW4=
  # base64 encoded password of the user.
  quobytePassword: cXVvYnl0ZQ==
  # apiURL should be of the form http(s)://<ip or resolvable host>:<port>
  # Please adjust the namespace accordingly default is 'default'
  # This following works for intra cluster communication, i.e. when
  # quobyte-core is enabled.
  apiURL: http://quobyte-api.default.svc.cluster.local:7860
  
  # Quobyte client should be deployed with <clientMountPoint>/mounts
  # For example, if you set clientMountPoint: /home/quobyte then quobyte
  # client should be deployed with /home/quobyte/mounts as the mount point
  clientMountPoint: /home/quobyte
  
  # Should be a valid DNS name. StorageClass.provisioner must 
  # match the value configured here. 
  csiProvisionerName: csi.quobyte.com 
  
  # When set to true, uses PVC.namespace as Quobyte tenant.
  # This does not create tenants automatically, your storage system must
  # have tenants that match the namespace.
  useK8SNamespaceAsTenant: false 

  # Set this to true to enable Quobyte access keys. Then, add access key
  # information to your K8S secret and use this secret in StorageClass as
  # mount secret. Quobyte-CSI and Client uses access key information
  # from the mount secret to securely mount volumes.
  # When access keys are enabled in CSI driver, Quobyte client must also be 
  # enabled with access keys. To enable access keys on native client,
  # add "enable-access-contexts" in /etc/quobyte/client-service.cfg.
  # For container based client configuration, see client.yaml definition.
  enableAccessKeys: false
  
  # Enabling this feature requires additional driver setup (see README.md) 
  enableSnapshots: false
  
  # Set to true to deploy csi driver with pod security policies.
  # Change required ONLY if you have pod security policies enabled K8S environment.
  podSecurityPolicies: false

  podKiller:
    enable: true
    # should be a valid golang time.Duration 
    monitoringInterval: 5s
   
  # The dev configuration is intended for Quobyte Developers and internal use.
  # Please do NOT change the dev: configuration unless otherwise adviced to change.
  dev:
    # Release version
    csiProvisionerVersion: "v1.4.1"
    # Release container
    # github.com/quobyte/quobyte-csi
    csiImage: "quay.io/quobyte/csi:v1.4.0"
    # github.com/quobyte/pod-killer
    podKillerImage: quay.io/quobyte/pod-killer:v0.1.0
    # k8s sidecar containers (https://github.com/kubernetes-csi/)
    k8sProvisionerImage: quay.io/k8scsi/csi-provisioner:v1.6.0
    k8sClusterDriverRegistrarImage: quay.io/k8scsi/csi-cluster-driver-registrar:v1.0.1
    k8sResizerImage: quay.io/k8scsi/csi-resizer:v0.5.0
    k8sNodeRegistrarImage: quay.io/k8scsi/csi-node-driver-registrar:v1.3.0
    k8sAttacherImage: quay.io/k8scsi/csi-attacher:v2.2.0
    # when updating image for snapshotter, update snaptshotter setup CRD
    # instructions in README
    k8sSnapshotterImage: quay.io/k8scsi/csi-snapshotter:v2.1.1
